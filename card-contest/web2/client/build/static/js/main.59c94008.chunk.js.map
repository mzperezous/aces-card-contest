{"version":3,"sources":["css/Header.module.css","css/Home.module.css","api/games.js","api/users.js","components/Header.js","pages/Home/Home.js","pages/Game/Dashboard.js","pages/Game/Leaderboard.js","pages/Game/Profile.js","pages/Game/Rules.js","pages/Game/Game.js","App.js","index.js","css/Dashboard.module.css","css/Profile.module.css","css/Leaderboard.module.css","css/Rules.module.css","css/Game.module.css"],"names":["module","exports","getGameRankings","gameId","a","axios","get","res","data","entries","playGame","pubkey","post","gameType","substring","user","userLogin","headers","getRecentGames","Header","props","onProfileClick","buttonWidth","className","styles","HeaderGame","HeaderHome","style","minWidth","ProfileButton","onClick","width","display","require","Home","wallet","useState","isLoggedIn","setIsLoggedIn","useEffect","publicKey","toString","to","Content","Or","href","faceRankings","now","Date","pacesAddress","getTime","getTimezoneOffset","PublicKey","toWalletAddress","Dashboard","maxEntries","rank","setRank","rankings","setRankings","reloadRankings","setReloadRankings","pacesBalance","reloadPaces","setReloadPaces","acesCards","setAcesCards","wildCards","setWildCards","bestHand","setBestHand","setEntries","aces","i","map","entry","indexOf","count","length","playAgainButton","setPlayAgainButton","createEntry","connection","Connection","pacesMint","toWalletPubkey","pacesPubkey","getOrCreateAssociatedTokenAccount","signTransaction","then","fromTokenAccount","console","log","address","toTokenAccount","tx","Transaction","add","createTransferInstruction","TOKEN_PROGRAM_ID","getRecentBlockhash","blockhash","recentBlockhash","feePayer","signedTx","r","e","sendRawTransaction","serialize","signature","catch","DashContainer","Play","handType","toUpperCase","slice","replace","Hand","hand","sort","b","face","card","image","src","alt","suit","Replay","Stats","disabled","Cards","CardGrid","Headline","Card","Leaderboard","setIsRulesOpen","rankingsToShow","setRankingsToShow","Math","min","concat","match","LeaderboardContainer","Number","BoldRank","RulesButton","Profile","isProfileOpen","setIsProfileOpen","recentGames","setRecentGames","history","ProfileBlock","ProfileNone","ProfileMain","ProfileInner","overflow","textOverflow","maxWidth","games","History","HistoryEntry","String","padStart","ranks","totals","Rules","isRulesOpen","RulesBlock","RulesNone","RulesMain","RulesInner","Game","GameArea","Rankings","App","useWallet","utc","getDate","getMonth","getFullYear","setPacesBalance","getParsedTokenAccountsByOwner","mint","accounts","value","account","parsed","info","tokenAmount","amount","path","element","AppWithProvider","walletOptions","useMemo","getPhantomWallet","getSlopeWallet","getSolflareWallet","getLedgerWallet","ConnectionProvider","endpoint","WalletProvider","wallets","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59c94008.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__RWSel\",\"HeaderHome\":\"Header_HeaderHome__4fkBX Header_Header__RWSel\",\"HeaderGame\":\"Header_HeaderGame__20foV Header_Header__RWSel\",\"ProfileButton\":\"Header_ProfileButton__77GX2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__1aUBM\",\"Content\":\"Home_Content__2ue8L\",\"Or\":\"Home_Or__1IcPt\",\"wallet-adapter-button\":\"Home_wallet-adapter-button__S-GGy\"};","import axios from 'axios';\n\nexport const getGameRankings = async (gameId) => {\n    let res = await axios.get(`/games/${gameId}`);\n    return res.data.entries;\n}\n\nexport const playGame = async (pubkey, gameId) => {\n    let res = await axios.post(`/games/play/${gameId}`, { gameType: gameId.substring(8), user: pubkey });\n    return res.data;\n}\n","import axios from 'axios';\n\nexport const userLogin = async (pubkey) => {\n    let res = await axios.post(`/users/login`, { user: pubkey }, { headers: { 'Content-Type': 'application/json' } });\n    return res.data;\n}\n\nexport const getRecentGames = async (pubkey) => {\n    let res = await axios.get(`/users/history/${pubkey}`);\n    return res.data;\n}\n\nexport const getGameEntry = async (pubkey, gameId) => {\n    let res = await axios.get(`/users/history/${pubkey}-${gameId}`);\n    return res.data;\n}\n\nexport const getAvailableCards = async (pubkey, gameId) => {\n    let res = await axios.get(`/users/cards/${pubkey}-${gameId}`);\n    return { availableCards: res.data.cards };\n}","import React from 'react';\n\nimport styles from '../css/Header.module.css';\n\nconst Header = (props) => {\n    const user = props.user;\n    const onProfileClick = props.onProfileClick;\n    let buttonWidth = \"184px\";\n\n    return (\n        <div className={user ? styles.HeaderGame : styles.HeaderHome}>\n            <div style={ { minWidth: buttonWidth } }>\n                <p>The <b>ACES</b></p>\n            </div>\n            <p>The <b>ACES Contest</b></p>\n            <div style={ { minWidth: buttonWidth } }>\n                <button className={styles.ProfileButton} onClick={onProfileClick} style={ user ? { width: buttonWidth } : { display: \"none\" } }>PROFILE</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import { useState, useEffect } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { WalletMultiButton, WalletModalProvider } from '@solana/wallet-adapter-react-ui';\n\nimport { userLogin } from '../../api/users';\n\nimport Header from '../../components/Header';\n\nimport styles from '../../css/Home.module.css';\n\n// Wallet Multi-Button styling\nrequire('@solana/wallet-adapter-react-ui/styles.css');\nrequire('../../css/main.css');\n\nconst Home = (props) => {\n    const wallet = props.wallet;\n    \n    const [ isLoggedIn, setIsLoggedIn ] = useState(false);\n\n    // Go to '/play' when logged in\n    useEffect(() => {\n        if (wallet.publicKey) {\n            userLogin(wallet.publicKey.toString());\n            setIsLoggedIn(true);\n        } \n    \n    }, [wallet]);\n\n    return isLoggedIn ? (\n            <Navigate to=\"/play\"/>\n        ) : (\n        <div className={styles.Home}>\n            <Header user={false} onProfileClick={() => {}}/>\n                <div className={styles.Content}>\n                    <WalletModalProvider>\n                        <WalletMultiButton>PLAY</WalletMultiButton>\n                    </WalletModalProvider>\n                    <div className={styles.Or}>\n                        <div></div><hr/>\n                        <p>Or</p>\n                        <hr/>\n                    </div>\n                    <a href=\"https://www.magiceden.io/marketplace/the_aces_nft\">BUY</a>\n                    <p>In Order to Play the Game You Must Hold At Least 1 Aces NFT</p>\n                    <p>This version is in <b>Beta Mode</b></p>\n                </div>\n        </div>\n    )\n}\n\nexport default Home;","import { useState, useEffect } from 'react';\nimport { clusterApiUrl, Connection, PublicKey, Transaction } from '@solana/web3.js';\nimport { getOrCreateAssociatedTokenAccount, createTransferInstruction, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nimport { playGame, getGameRankings } from '../../api/games';\n\nimport styles from '../../css/Dashboard.module.css';\n\nconst faceRankings = [ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n\nconst now = new Date();\nconst utc = new Date(now.getTime() + now.getTimezoneOffset() * 60000);\nconst entryFee = 5;\n\nconst pacesAddress = new PublicKey(\"CdQseFmnPh2JBiz5747dJ6oYXK9NKnbdFRfiXTcZuaXT\");\nconst toWalletAddress = new PublicKey(\"3y5BXpxZsKqEab8HNYVx2MN77bkiZmCtpZ74RnXkrqjM\");\n\nconst Dashboard = (props) => {\n    const { wallet, gameId, rank, setRank, rankings, setRankings, reloadRankings, setReloadRankings, pacesBalance, reloadPaces, setReloadPaces } = props;\n    const [ acesCards, setAcesCards ] = useState([]);\n    const [ wildCards, setWildCards ] = useState([]);\n    const [ bestHand, setBestHand ] = useState();\n\n    let maxEntries;\n    if (gameId.substring(0,7) === \"tourney\") maxEntries = -1;\n    else maxEntries = 20;\n    const [ entries, setEntries ] = useState(maxEntries);\n\n    // Get available cards\n    useEffect(() => {\n        if (bestHand && reloadRankings === 0) {\n            setAcesCards(bestHand.aces ? bestHand.aces : []);\n            setWildCards(bestHand.wildCards);\n        }\n\n    }, [wallet.publicKey, gameId, bestHand, reloadRankings, setAcesCards, setWildCards]);\n\n    // Get best hand from rankings\n    useEffect(() => {\n        if (rankings) {\n            let i = rankings.map(entry => entry.user).indexOf(wallet.publicKey.toString());\n            if (i !== -1) setBestHand(rankings[i]);\n\n            // Get num of entries at login\n            let count = 0;\n            for (let i = 0; i < rankings.length; i++) {\n                if (rankings[i].user === wallet.publicKey.toString()) { \n                    count += 1;\n                }\n            }\n            setEntries(count);\n        }\n\n    }, [wallet.publicKey, rankings, setEntries]);\n\n    const [ playAgainButton, setPlayAgainButton ] = useState(\"PLAY AGAIN\");\n\n    // Create a game entry request\n    const createEntry = () => {\n        setPlayAgainButton(\"Thinking...\");\n        let connection = new Connection('https://solana-api.projectserum.com');\n\n        // Pay entry fee then play\n        let pacesMint = new PublicKey(pacesAddress);\n        let toWalletPubkey = new PublicKey(toWalletAddress);\n        let pacesPubkey = new PublicKey(pacesMint);\n\n        getOrCreateAssociatedTokenAccount(connection, wallet.publicKey, pacesPubkey, wallet.publicKey, wallet.signTransaction) // Get user's token account\n            .then(fromTokenAccount => {\n                console.log(fromTokenAccount.address.toString())\n\n                getOrCreateAssociatedTokenAccount(connection, wallet.publicKey, pacesPubkey, toWalletPubkey, wallet.signTransaction) // Get vault token account\n                    .then(toTokenAccount => {\n                        console.log(toTokenAccount.address.toString())\n\n                        // Create transfer tx\n                        let tx = new Transaction().add(\n                            createTransferInstruction(\n                                fromTokenAccount.address,\n                                toTokenAccount.address, \n                                wallet.publicKey,\n                                entryFee,\n                                [],\n                                TOKEN_PROGRAM_ID\n                            )\n                        );\n\n                        connection.getRecentBlockhash() // TODO: Sync pacakage versioning between @solana/web3.js and spl-token so in sync (for eslint)\n                            .then(blockhash =>  {\n                                console.log(blockhash);\n                                tx.recentBlockhash = blockhash.blockhash;\n                                tx.feePayer = wallet.publicKey;\n\n                                wallet.signTransaction(tx)\n                                    .then(signedTx => {\n\n                                        playGame(wallet.publicKey, gameId)\n                                            .then(entry => {\n\n                                                if (entry && entry !== {}) {\n                                                    setAcesCards(entry.aces);\n                                                    setWildCards(entry.wildCards);\n\n                                                    if (wallet.publicKey) {\n                                                        getGameRankings(gameId).then(entries => {\n                                                            setRankings(entries);\n                                                            if (entries) {\n                                                                let r = entries.map(e => e.user).indexOf(wallet.publicKey.toString());\n                                                                setRank(r === -1 ? \"?\" : r + 1);\n                                                                if (r !== -1) setBestHand(entries[r]); \n                                                            }\n                                                        })\n                                                    }\n\n                                                    console.log(\"setting state\");\n                                                    setReloadRankings(reloadRankings + 1);\n                                                    setReloadPaces(reloadPaces + 1);\n                                                    setPlayAgainButton(\"PLAY AGAIN\");\n                                                    console.log(\"state set\");\n\n                                                    // Transfer tokens after entry is confirmed\n                                                    connection.sendRawTransaction(signedTx.serialize())\n                                                        .then(signature => {\n                                                            console.log(`${entryFee} PACES transferred to ${toWalletPubkey.toString()}. Tx signature: ${signature}`);\n                                                            \n                                                        })\n                                                        .catch(e => console.log(\"Failed sending transaction.\"));\n                                                }\n                                        });\n                                    })\n                                    .catch(e => {\n                                        setPlayAgainButton(\"PLAY AGAIN\"); \n                                        console.log(\"Transaction signature cancelled.\");\n                                    });\n                            });\n                    });\n            });\n    };\n\n    return (\n        <div className={styles.DashContainer}>\n            <div className={styles.Dashboard}>\n                <div className={styles.Play}>\n                    {\n                        bestHand ? (\n                            !bestHand.handType ? (\n                                <>\n                                    <p>Need at least 1 Aces NFT to play the card contest.</p>\n                                    <button disabled={!pacesBalance || pacesBalance < entryFee ? true : false}\n                                        onClick={() => createEntry()}\n                                    >\n                                            PLAY\n                                    </button>\n                                    <p>{rankings ? `Rank: ${rank}/${rankings.length}` : `Rank`}</p>\n                                </>\n                            ) : (\n                                <>\n                                    <p>{`${(bestHand.handType[0].toUpperCase() + bestHand.handType.slice(1)).replace(\"-\", \" \")}`}</p>\n                                    <div className={styles.Hand}>\n                                        {\n                                            bestHand.hand\n                                                .sort((a, b) => \n                                                    (faceRankings.indexOf(b.face.length === 1 ? b.face : b.face[0].toUpperCase()) - faceRankings.indexOf(a.face.length === 1 ? a.face : a.face[0].toUpperCase())))\n                                                .map( (card, i) => \n                                                <div key={i} >\n                                                    {\n                                                        card.image ? (\n                                                            <img src={card.image} alt={card.face + \" of \" + card.suit}/>\n                                                        ) : (\n                                                            <img src={`/images/wildCards/${card.face.toUpperCase()}${card.suit}.png`} alt={card.face.toUpperCase() + \" of \" + card.suit}/>\n                                                        )\n                                                    }\n                                                </div>\n                                            )\n                                        }\n                                    </div>\n                                    <div className={styles.Replay}>\n                                        <div className={styles.Stats}>\n                                            <p><b>Rank: </b>{rankings ? `${rank}/${rankings.length}` : ``}</p>\n                                            <p><b>Entries: </b>{maxEntries !== -1 ? `${entries}/${maxEntries}` : `${entries}`}</p>\n                                        </div>\n                                        <button onClick={() => createEntry()} \n                                            disabled={(entries && entries >= maxEntries && maxEntries !== -1) || playAgainButton !== \"PLAY AGAIN\" || acesCards.length === 0 ? true : false}\n                                        >\n                                            {playAgainButton}\n                                        </button>\n                                    </div>\n                                </>\n                            )\n                        ) : (\n                            <>\n                                <p>Best Hand</p>\n                                <button \n                                    onClick={() => createEntry()}\n                                    disabled={!pacesBalance || pacesBalance < entryFee ? true : false}\n                                >\n                                    PLAY\n                                </button>\n                                <p>{rankings ? `Rank: ${rank}/${rankings.length}` : `Rank`}</p>\n                            </>\n                        )\n                    }\n                </div>\n                <hr/>\n                <div className={styles.Cards}>\n                    <div className={styles.CardGrid}>\n                        <div className={styles.Headline}>\n                            <p>Table Cards</p>\n                        </div>\n                    {\n                        wildCards.map( (card, i) => \n                            <div key={i} className={styles.Card}>\n                                <img src={`/images/wildCards/${card.face}${card.suit}.png`} alt={card.face + \" of \" + card.suit}/>\n                            </div>\n                        )\n                    }\n                        <div className={styles.Headline}>\n                            <p>ACES</p>\n                        </div>\n                    {\n                        (acesCards && acesCards.length > 0) ? (acesCards\n                            .map( (card, i) => \n                                <div key={i} className={styles.Card}>\n                                    <img src={card.image} alt={card.face + \" of \" + card.suit}/>\n                                </div>\n                        )) : (\n                            <></>\n                            )\n                    }\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dashboard;","import { useState, useEffect } from 'react';\n\nimport styles from '../../css/Leaderboard.module.css';\n\nconst Leaderboard = (props) => {\n    const { rankings, rank, wallet, gameId, setIsRulesOpen } = props;\n    \n    let gameType;\n    if (gameId.substring(8) === \"deuceswild\") gameType = \"Deuces Wild\";\n    else if (gameId.substring(8) === \"4swild\") gameType = \"4's Wild\";\n    else if (gameId.substring(8) === \"secretwild\") gameType = \"Secret Wild\"\n    else if (gameId.substring(8) === \"8swild\") gameType = \"8's Wild\";\n    else if (gameId.substring(8) === \"6swild\") gameType = \"6's Wild\";\n    else if (gameId.substring(0,8) === \"tourney0\") gameType = \"February Card Contest Tourney\";\n    else gameType = \"Five Card Poker\";\n\n    // Calculate which hands should be shown (edge cases toward front or back of rankings)\n    const [ rankingsToShow, setRankingsToShow ] = useState();\n\n    useEffect(() => {\n        if (rankings) {\n            let res;\n            if (rank <= 5 || rank === \"?\") res = rankings.slice(0,Math.min(10, rankings.length));\n            else if (rank > rankings.length - 5) res = rankings.slice(rankings.length - Math.min(10, rankings.length), rankings.length);\n            else res = rankings.slice(rank - Math.min(5, rankings.length / 2), rank).concat(rankings.slice(rank, rank + Math.min(5, rankings.length / 2)));\n            res = res.map(r => ({ rank: 0, user: r.user }) );\n\n            // Find user's entry and match with rank\n            let match = -1;\n            for (let i = 0; i < res.length; i++) {\n                if (res[i].user === wallet.publicKey.toString()) {\n                    match = i; \n                    break;\n                }\n\n            }\n\n            if (match === -1) setRankingsToShow(rankings.slice(0, Math.min(10, rankings.length)).map((entry, i) => ({rank: i + 1, user: entry.user})));\n            else {\n                for (let i = 0; i < res.length; i++) {\n                    if (match !== i) res[i].rank = rank + i - match;\n                    else res[i].rank = rank;\n                }\n                setRankingsToShow(res);\n            }\n        }\n    }, [rankings, rank, wallet.publicKey, setRankingsToShow]);\n\n    return (\n        <div className={styles.LeaderboardContainer}>\n            <div className={styles.Leaderboard}>\n                <h1>Leaderboard: {gameType}</h1>\n                <hr/>\n                <ul>\n                    \n                    {\n                        rankingsToShow ? (\n                            rankingsToShow.map( (entry, i) => \n                            <li className={Number(entry.rank) === Number(rank) ? styles.BoldRank : \"\"} key={i} >\n                                {`#${entry.rank}: ` + entry.user}\n                            </li>\n                            )\n                        ) : (\n                            <></>\n                        )\n                    }\n                </ul>\n            </div>\n            <button className={styles.RulesButton} onClick={() => setIsRulesOpen(true)}>RULES</button>\n        </div>\n    )\n}\n\nexport default Leaderboard;","import { useState, useEffect } from 'react';\n\nimport { getRecentGames } from '../../api/users';\n\nimport styles from '../../css/Profile.module.css';\n\nconst Profile = (props) => {\n    const { wallet, isProfileOpen, setIsProfileOpen, pacesBalance } = props;\n\n    const [ recentGames, setRecentGames ] = useState();\n\n    useEffect(() => {\n        getRecentGames(wallet.publicKey.toString()).then(history => {\n            setRecentGames(history);\n        })\n    }, [wallet.publicKey, setRecentGames]);\n\n    return (\n        <div className={isProfileOpen ? styles.ProfileBlock : styles.ProfileNone}>\n            <div className={styles.ProfileMain}>\n                <button onClick={() => setIsProfileOpen(false)}/>\n                <div className={styles.ProfileInner}>\n                    <div>\n                        <p>Wallet ID</p>\n                        <p style={{ overflow: \"hidden\", textOverflow: \"ellipsis\", maxWidth: \"50%\" }}>{wallet.publicKey.toString()}</p>\n                    </div>\n                    <div>\n                        <p>Games played:</p>\n                        <p>{recentGames?.games ? recentGames.games.length : \"0\"}</p>\n                    </div>\n                    <div>\n                        <p>Coin balance:</p>\n                        <p>{pacesBalance || 0}</p>\n                    </div>\n                    <div>\n                        <p>Contest history:</p>\n                        <div className={styles.History}>\n                        {\n                            recentGames?.games ? (\n                                recentGames.games.slice(0,5).map( (gameId, i) => \n                                    gameId.substring(0,8) !== \"testtest\" ? (\n                                        <div key={i} className={styles.HistoryEntry}>\n                                            {`${gameId.substring(8) === \"deuceswild\" ? \"2's Wild \" \n                                                : (gameId.substring(8) === \"4swild\" ? \"4's Wild\" \n                                                : (gameId.substring(8) === \"secretwild\" ? \"Secret Wild\" \n                                                : (gameId.substring(8) === \"8swild\" ? \"8's Wild\" \n                                                : (gameId.substring(8) === \"6swild\" ? \"6's Wild\"\n                                                : (gameId.substring(0,8) === \"tourney0\" ? \"February Card Contest Tourney\" : \"Classic 5 Card\")))))}\n                                                ${gameId.substring(0,7) !== \"tourney\" ? String(Number(gameId.substring(2,4)) + 1).padStart(2, '0') : \"\"}/${gameId.substring(0,2)} - \n                                                Rank ${recentGames.ranks[i]}/${recentGames.totals[i]}`}\n                                        </div>\n                                    ) : (\n                                        <></>\n                                    )\n                                )\n                            ) : (\n                                <></>\n                            )\n                        }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Profile;","import styles from '../../css/Rules.module.css';\n\nconst Rules = (props) => {\n    const isRulesOpen = props.isRulesOpen;\n    const setIsRulesOpen = props.setIsRulesOpen;\n\n    return (\n        <div className={isRulesOpen ? styles.RulesBlock : styles.RulesNone}>\n            <div className={styles.RulesMain}>\n                <button onClick={() => setIsRulesOpen(false)}/>\n                <div className={styles.RulesInner}>\n                    <ul>\n                        <li>\n                            The Aces Card Contest runs every day from 12AM-11:59PM UTC.\n                        </li>\n                        <li>\n                            You get up to 20 entries per day, with each entry providing you with 4 new \"Table Cards.\"\n                        </li>\n                        <li>\n                            Each entry, you will get up to 10 of your Aces NFTs randomly drawn from your deck alone with those\n                            4 Table Cards to make your best hand.\n                        </li>\n                        <li>\n                            After you enter, your entry's respective Aces and Table Cards will appear on the bottom of the screen. \n                            The top shows your best entry from the current contest.\n                        </li>\n                        <li>\n                            Currently, the contest is \"Best 5 Card Poker Hand.\" This game has variants such as 2's Wild and 4's Wild, which\n                            provides players with another wild card (on top of the Joker) to increase their chances of drawing low probability hands.        \n                        </li>\n                        <li>\n                            By definition, a <b>Table Card</b> is a random card drawn from a normal deck of 52 cards. These cannot be Jokers nor wild.\n                        </li>\n                        <li>\n                            An <b>Aces Card</b> is a card you own by owning an <b>Aces NFT</b>. These can be jokers, wild, and are repeatable (i.e. you can draw 2 Ace of Spades if you own them).\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Rules;","import { useState, useEffect } from 'react';\nimport { Navigate } from 'react-router-dom';\n\nimport Header from '../../components/Header';\nimport Dashboard from './Dashboard';\nimport Leaderboard from './Leaderboard';\nimport Profile from './Profile';\nimport Rules from './Rules';\n\nimport styles from '../../css/Game.module.css';\n\nconst Game = (props) => {\n    const { wallet, gameId, rankings, setRankings, reloadRankings, setReloadRankings, pacesBalance, setReloadPaces } = props;\n\n    const [ isProfileOpen, setIsProfileOpen ] = useState(false);\n    const [ isRulesOpen, setIsRulesOpen ] = useState(false);\n    const [ rank, setRank ] = useState(\"?\");\n\n    // Get current game rankings and find rank\n    useEffect(() => {\n        if (wallet?.publicKey) {\n            if (rankings) {\n                let r = rankings.map(entry => entry.user).indexOf(wallet.publicKey.toString());\n                setRank(r === -1 ? \"?\" : r + 1);\n            }\n            else {\n                setRank(\"?\");\n            }\n        }\n    }, [wallet, gameId, rankings, setRank]);\n\n    return wallet.publicKey ? (\n        <div className={styles.Game}>\n            <p><b>BETA</b></p>\n            <div className={styles.Content}>\n                <div className={styles.GameArea}>\n                    <Header user={true} onProfileClick={() => setIsProfileOpen(true)}/>\n                    <Dashboard \n                        wallet={wallet} \n                        gameId={gameId} \n                        rankings={rankings} \n                        rank={rank} \n                        reloadRankings={reloadRankings}\n                        setRankings={setRankings} \n                        setRank={setRank}\n                        setReloadRankings={setReloadRankings}\n                        pacesBalance={pacesBalance}\n                        setReloadPaces={setReloadPaces}\n                    />\n                </div>\n                <div className={styles.Rankings}>\n                    <Leaderboard \n                        wallet={wallet} \n                        gameId={gameId} \n                        rankings={rankings} \n                        rank={rank} \n                        setIsRulesOpen={setIsRulesOpen}\n                    />\n                </div>\n            </div>\n            <Profile \n                wallet={wallet} \n                isProfileOpen={isProfileOpen} \n                setIsProfileOpen={setIsProfileOpen} \n                pacesBalance={pacesBalance}\n            />\n            <Rules \n                isRulesOpen={isRulesOpen} \n                setIsRulesOpen={setIsRulesOpen}\n            />\n        </div>\n    ) : (\n        <Navigate to=\"/\"/>\n    )\n    ;\n}\n\nexport default Game;","// Card contest PACES wallet address: 3y5BXpxZsKqEab8HNYVx2MN77bkiZmCtpZ74RnXkrqjM\n// PACES token mint address: CdQseFmnPh2JBiz5747dJ6oYXK9NKnbdFRfiXTcZuaXT\n\n// React, react-router, and react-bootstrap imports\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Route, Routes, BrowserRouter } from 'react-router-dom';\n\n// Solana-specific imports\nimport { clusterApiUrl, Connection, PublicKey } from '@solana/web3.js';\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  getTorusWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { ConnectionProvider, WalletProvider, useWallet } from '@solana/wallet-adapter-react';\n\nimport { getGameRankings } from './api/games';\n\n// Pages\nimport Home from './pages/Home/Home';\nimport Game from './pages/Game/Game';\n\nconst pacesAddress = new PublicKey(\"CdQseFmnPh2JBiz5747dJ6oYXK9NKnbdFRfiXTcZuaXT\");\n\nconst App = () => {\n  const wallet = useWallet();\n\n  const now = new Date();\n  const utc = new Date(now.getTime() + now.getTimezoneOffset() * 60000);\n\n  //const gameType = \"2swild\";\n  // if ([ \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\" ].indexOf(String(utc.getDate()).padStart(2, '0')) !== -1) gameType = \"deuceswild\";\n  // else if ([ \"31\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\" ].indexOf(String(utc.getDate()).padStart(2, '0')) !== -1) gameType = \"4swild\";\n  // else if ([\"08\", \"09\", \"10\", \"11\", \"12\", \"13\"].indexOf(String(utc.getDate()).padStart(2, '0')) !== -1) gameType = \"secretwild\";\n  // else if ([\"14\", \"15\", \"16\", \"17\"].indexOf(String(utc.getDate()).padStart(2, '0')) !== -1) gameType = \"8swild\";\n  const gameType = \"5card\";\n\n  const gameId = String(utc.getDate()).padStart(2,'0') + String(utc.getMonth() + 1).padStart(2,'0') + String(utc.getFullYear()) + gameType;\n // const gameId = \"tourney0\" + gameType;\n  \n  const [ rankings, setRankings ] = useState(false);\n  const [ reloadRankings, setReloadRankings ] = useState(0);\n  const [ pacesBalance, setPacesBalance ] = useState();\n  const [ reloadPaces, setReloadPaces ] = useState(0);\n\n  // Get current game rankings\n  useEffect(() => {\n    getGameRankings(gameId).then(entries => {\n        if (entries)\n          setRankings(entries);\n        else setRankings([]);\n    })\n  }, [wallet, gameId, reloadRankings, setRankings]);\n\n  // Get PACES balance\n  useEffect(() => {\n\n    if (wallet.publicKey) {\n      let connection = new Connection('https://solana-api.projectserum.com');\n\n      connection.getParsedTokenAccountsByOwner(wallet.publicKey, {mint: pacesAddress})\n        .then(accounts => {setPacesBalance(accounts.value[0].account.data.parsed.info.tokenAmount.amount || 0); console.log(accounts)})\n        .catch(e => console.log(e));\n    }\n\n  }, [wallet, reloadPaces, setPacesBalance]);\n\n  return (\n    <>\n      <Routes>\n        <Route path=\"/\" element={<Home wallet={wallet}/>}/>\n        <Route path=\"/play\" \n          element={\n            <Game \n              wallet={wallet} \n              gameId={gameId} \n              rankings={rankings} \n              setRankings={setRankings} \n              reloadRankings={reloadRankings} \n              setReloadRankings={setReloadRankings}\n              pacesBalance={pacesBalance}\n              setReloadPaces={setReloadPaces}\n            />\n          }\n        />\n      </Routes>\n    </>\n  );\n}\n\nconst AppWithProvider = () => {\n  const endpoint = 'https://solana-api.projectserum.com';\n\n  const walletOptions = useMemo(() => [\n    getPhantomWallet(),\n    getSlopeWallet(),\n    getSolflareWallet(),\n    getLedgerWallet()\n  ], []);\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={walletOptions}>\n          <BrowserRouter>\n            <App/>\n          </BrowserRouter>\n      </WalletProvider>\n    </ConnectionProvider>\n  )\n}\n\nexport default AppWithProvider;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport AppWithProvider from './App';\n\nReactDOM.render(\n  <AppWithProvider />,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DashContainer\":\"Dashboard_DashContainer__G4W5n\",\"Dashboard\":\"Dashboard_Dashboard__1uK3T\",\"Play\":\"Dashboard_Play__1d_2z\",\"Replay\":\"Dashboard_Replay__2R53y\",\"Hand\":\"Dashboard_Hand__17d2t\",\"Cards\":\"Dashboard_Cards__2XYZz\",\"CardGrid\":\"Dashboard_CardGrid__2Vfkb\",\"Headline\":\"Dashboard_Headline__3lSWr\",\"Card\":\"Dashboard_Card__2tCQ2\",\"Stats\":\"Dashboard_Stats__1e_pm\",\"RulesButton\":\"Dashboard_RulesButton__1Da-z\",\"Footer\":\"Dashboard_Footer__CVF82\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"Profile_Profile__nD2-Z\",\"ProfileMain\":\"Profile_ProfileMain__18I6y\",\"ProfileInner\":\"Profile_ProfileInner__risdd\",\"ProfileBlock\":\"Profile_ProfileBlock__1_2dO Profile_Profile__nD2-Z\",\"ProfileNone\":\"Profile_ProfileNone__ePzbk Profile_Profile__nD2-Z\",\"History\":\"Profile_History__3oShl\",\"HistoryEntry\":\"Profile_HistoryEntry__3jN5Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LeaderboardContainer\":\"Leaderboard_LeaderboardContainer__DjWNe\",\"Leaderboard\":\"Leaderboard_Leaderboard__1JspY\",\"BoldRank\":\"Leaderboard_BoldRank__2L6LA\",\"RulesButton\":\"Leaderboard_RulesButton__2pujK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Rules\":\"Rules_Rules__24oWh\",\"RulesMain\":\"Rules_RulesMain___9aKG\",\"RulesInner\":\"Rules_RulesInner__1ZpXD\",\"RulesBlock\":\"Rules_RulesBlock__sU4FC Rules_Rules__24oWh\",\"RulesNone\":\"Rules_RulesNone__2rXF0 Rules_Rules__24oWh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game_Game__1qzE8\",\"Content\":\"Game_Content__2W_3p\",\"GameArea\":\"Game_GameArea__38dyN\",\"Rankings\":\"Game_Rankings__1yrWx\"};"],"sourceRoot":""}